这个程序的构想是：   直接遍历文件夹，然后如果找到一个文件，就开一个线程去上传这个文件。  

			 如果是多个线程一起上传，那么肯定是有问题 的，因为用的是同一个socket对象， 相当于用同一条管道，那么就会把多个文件的数据混合在一起。
			 如果使用同步代码块，那么就跟单线程没有什么区别，为什么还要费那劲去开多线程呢？
			 
			如果想要使用多线程，那么就得使用不同的端口，不同的socket对象来传输。(不会，这样子好混乱)
			
			多线程应该是：  服务器能同时接收多个客户端的上传任务，一个客户端，开一个线程。
			
		
结果： 目前已经实现了多线程的功能了！
	同时，已经解决了不能上传绝对路径下的文件夹问题。 
	
	解决的思路是，在传递文件或者文件夹信息的时候，不止传递文件名。而是传递相对于我们上传的文件夹的相对路径。
	比如说，我们要上传的文件夹的绝对路径为：C:\Users\Administrator\Desktop\aaa（就算是拿的eclipse 的相对路径，也要先统一转成绝对路径）
	那么，我们就把C:\Users\Administrator\Desktop 看作是根目录，我们应该把这个路径常量保存起来。-----> parentPath
	之后我们要传递的文件路径或者文件夹路径都是相对于上面那个根目录的路径。
	比如说： 
		C:\Users\Administrator\Desktop\aaa\bbb  ------------------->   aaa\bbb
		C:\Users\Administrator\Desktop\aaa\a.txt ------------------>   aaa\a.txt
		C:\Users\Administrator\Desktop\aaa\bbb\1.txt--------------->   aaa\bbb\1.txt
		
	这样处理的好处是，我们只要在服务器那边也拿到一个类似的 parentPath,  配合拿到的这个相对路径，我们就可以造出一个结构完全相同的文件夹。new File(parentPath, name)
	这个很重要，因为这样子处理的一个最大的好处是：
		在客户端使用递归遍历多级文件夹，到了服务器端这边就被简化成了一个 while(true)循环。 我们只需要判断，是文件还是文件夹，然后创建对应的文件或者文件夹。
		如果是文件，再使用io流，把内存复制过来。   如果是文件夹，就造一个同名的文件夹，之后就直接跳过了。不需要再跟着客户端，进入这个目录。也就是说，不再需要使用递归了。
		
	
	当然，如果我们每个文件或者文件夹，都只传递名字的话，那么服务端也要跟着使用递归了！！！(考虑一下，应该也不会很难的)
	!!!!!!!!!!!!!!!!!!!!!!!!!其实挺难的，我感觉。
		
		

			
